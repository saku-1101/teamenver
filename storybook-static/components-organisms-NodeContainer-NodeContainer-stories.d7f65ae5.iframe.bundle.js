"use strict";(self.webpackChunkteamenver=self.webpackChunkteamenver||[]).push([[697],{"./src/components/organisms/NodeContainer/NodeContainer.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>NodeContainer_stories});var defineProperty=__webpack_require__("./node_modules/.pnpm/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js"),asyncToGenerator=__webpack_require__("./node_modules/.pnpm/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),react=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),regenerator=__webpack_require__("./node_modules/.pnpm/@babel+runtime@7.22.15/node_modules/@babel/runtime/regenerator/index.js"),regenerator_default=__webpack_require__.n(regenerator),dist=__webpack_require__("./node_modules/.pnpm/@webcontainer+api@1.1.5/node_modules/@webcontainer/api/dist/index.js"),xterm=__webpack_require__("./node_modules/.pnpm/xterm@5.2.1/node_modules/xterm/lib/xterm.js"),xterm_addon_fit=__webpack_require__("./node_modules/.pnpm/xterm-addon-fit@0.8.0_xterm@5.2.1/node_modules/xterm-addon-fit/lib/xterm-addon-fit.js"),readmeGenerator=function readmeGenerator(_ref){var manager=_ref.manager,isGit=_ref.isGit;return"\n  // 🚀 If you agree with the settings below, give the access to the execution file with `chmod u+x create.sh`, and then just type `./create.sh`  to start your Vite app with your settings.\n  // In order to observe what contents were generated, stop the server with `ctrl + C` and type `ls -a` on the terminal.\n\n  // 🧞‍♂️ Psst! here's the full code which is going to be executed in the terminal.\n  // If you want to create your project in your localhost machine, please try the same code away.\n  \n  ".concat(isGit?"// 🐙🐱 For security reason, we're afraid we cannot execute the git command and connect to your repo on your behalf. \\\n  // You can initialize the local repo and commit the init project on your preferred IDE using the commands generated below.":"","\n\n  // Cheers!\n\n  // *********************************************\n\n  // Upcoming feature...\n  // (Ex:)\n  ").concat(manager," create vite my-vue-app --template vue\n  ").concat(manager," install -D @pandacss/dev\n  ").concat(manager," panda init --postcss\n  ").concat(manager," run dev\n\n  ").concat(isGit?"// 🐙🐱 To initialize Github repository *********************************************\n\n  # 1: Initialize the local repository (Please execute only once.)\n  git init\n\n  # 2: Staging all changes\n  git add .\n\n  # 3: Commit them to the local repository\n  git commit -m \"Initial commit\"\n\n  # 4: Create a remote repository using the name of `your-repo`\n  \n  # 5: Keep in mind to copy the created repo's URL as you'll use it in the next step.\n  # The URL must be something like this: `https://github.com/yourusername/your-repo.git`\n\n  # 6: Register the remote repository to the local\n  git remote add origin https://github.com/yourusername/your-repo.git\n\n  # Push all\n  git push -u origin main":"")},console=__webpack_require__("./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");var _Default$parameters,_Default$parameters2,fileGenerator=function(){var _ref2=(0,asyncToGenerator.Z)(regenerator_default().mark((function _callee(_ref){var manager,isGit,md;return regenerator_default().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _ref.fw_name,_ref.ui_name,_ref.css_name,_ref.eslint,_ref.prettier,_ref.isTs,_ref.lint_staged_husky,_ref.hygen,_ref.vscode,_ref.volta,manager=_ref.manager,isGit=_ref.isGit,md="".concat(readmeGenerator({manager,isGit})),'/** @format */\n\n  import { execSync } from "child_process";\n  import { access, constants, writeFile, writeFileSync } from "fs";\n  import path from "path";\n  \n  import inquirer from "inquirer";\n  \n  const appGenerator = async ({\n      fw_name,\n      css_name,\n      ui_name,\n      eslint,\n      prettier,\n      isTs,\n      lint_staged_husky,\n      hygen,\n      vscode,\n      volta,\n      manager,\n  }) => {\n      try {\n          // Create a project and switch to the directory.\n          switch (fw_name) {\n              case "vue":\n                  await vueInstall(manager, isTs, eslint, prettier); // eslint option\n                  break;\n              case "react":\n                  await reactInstall(manager, isTs);\n                  break;\n              case "lit":\n                  await litInstall(manager, isTs);\n                  break;\n              case "svelte":\n                  await svelteInstall(manager, isTs);\n                  break;\n              case "solid":\n                  await solidInstall(manager, isTs);\n                  break;\n              case "qwik":\n                  await qwikInstall(manager, isTs);\n                  break;\n              default:\n                  console.log(\n                      `Uh oh. The framework you selected is still not under our support, or incorrect spelling. \\\\ Try again.`\n                  );\n          }\n  \n          if (eslint === "template") {\n              const eslintrcFileGenerate = () =>\n                  `{\n               "extends": ["eslint:recommended", "prettier"],\n               "plugins": ["import", "unused-imports"],\n               "rules": {\n                 "@typescript-eslint/no-unused-vars": "off",\n                 "unused-imports/no-unused-imports": "warn",\n                 "import/order": [\n                   "warn",\n                   {\n                     "groups": [\n                       "builtin",\n                       "external",\n                       "internal",\n                       "parent",\n                       "sibling",\n                       "index",\n                       "object",\n                       "type"\n                     ],\n                     "newlines-between": "always",\n                     "pathGroupsExcludedImportTypes": ["builtin"],\n                     "alphabetize": { "order": "asc", "caseInsensitive": true },\n                     "pathGroups": [\n                     ]\n                   }\n                 ]\n               }\n             }`;\n  \n              const eslintrcFile = ".eslintrc.json";\n              const eslintignoreFile = ".eslintignore";\n  \n              // Scaffold eslint\n              writeFileSync(\n                  path.join(process.cwd(), eslintrcFile),\n                  eslintrcFileGenerate()\n              );\n  \n              const eslintingoreFileGenerate = () => ``;\n  \n              writeFileSync(\n                  path.join(process.cwd(), eslintignoreFile),\n                  eslintingoreFileGenerate()\n              );\n          } else if (eslint === "yes") {\n              execSync(`${manager} install -D eslint`, { stdio: "inherit" });\n              execSync(`${manager} create @eslint/config`, { stdio: "inherit" });\n              execSync(`${manager} install -D vite-plugin-checker`, {\n                  stdio: "inherit",\n              });\n          } else {\n              console.log("eslint installation was skipped");\n          }\n  \n          if (prettier === "template") {\n              execSync(`${manager} install -D prettier`, { stdio: "inherit" });\n              execSync(`${manager} install -D eslint-config-prettier`, {\n                  stdio: "inherit",\n              });\n              const prettierrcFile = ".prettierrc.json";\n              const prettierignoreFile = ".prettierignore";\n  \n              const prettierrcFileGenerate = () => `\n            {\n              "plugins": [""],\n              "semi": false,\n              "singleQuote": true,\n              "printWidth": 90,\n              "tabWidth": 2,\n              "trailingComma": "all",\n              "jsxSingleQuote": true\n            }\n            `;\n              // Scafford prettier\n              writeFileSync(\n                  path.join(process.cwd(), prettierrcFile),\n                  prettierrcFileGenerate()\n              );\n  \n              const prettieringoreFileGenerate = () => ``;\n  \n              writeFileSync(\n                  path.join(process.cwd(), prettierignoreFile),\n                  prettieringoreFileGenerate()\n              );\n          } else if (prettier === "yes") {\n              execSync(`${manager} install -D prettier eslint-config-prettier`, {\n                  stdio: "inherit",\n              });\n          } else {\n              console.log("prettier installation was skipped");\n          }\n  \n          // css library installation\n          if (css_name) {\n              switch (css_name) {\n                  case "bootstrap":\n                      bootstrapInstall(manager);\n                      break;\n                  case "tailwind":\n                      tailwindInstall(manager);\n                      break;\n                  case "panda":\n                      pandacssInstall(manager);\n                      break;\n                  default:\n                      console.log(\n                          `Uh oh. The framework you selected is still not under our support.`\n                      );\n              }\n          } else {\n              console.log("css library installation was skipped");\n          }\n  \n          // ui library installation\n          if (ui_name) {\n              switch (ui_name) {\n                  case "mui":\n                      muiInstall(manager, fw_name, css_name);\n                      break;\n                  case "daisy":\n                      daisyInstall(manager);\n                      break;\n                  default:\n                      console.log(\n                          `Uh oh. The framework you selected is still not under our support.`\n                      );\n              }\n          } else {\n              console.log("UI library installation was skipped");\n          }\n  \n          // Install dependency if needed\n          execSync(`${manager} install`, { stdio: "inherit" });\n  \n          // Run and serve\n          execSync(`${manager} run dev`, { stdio: "inherit" });\n      } catch (error) {\n          console.error("An error occurred:", error.message);\n      }\n  };\n  \n  const generalQuestion = [\n      {\n          type: "input",\n          name: "projectName",\n          message: "What do you want to name your app?",\n      },\n  ];\n  // framework\n  const vueInstall = async (manager, isTs, eslint, prettier) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n  \n      const generalAnswers = await inquirer.prompt(generalQuestion);\n  \n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template vue-ts" : " --template vue"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          execSync(\n              `${manager} create vue@latest ${generalAnswers.projectName} ${\n                  isTs ? "--typescript" : ""\n              } ${\n                  eslint && prettier\n                      ? "--eslint-with-prettier"\n                      : eslint\n                      ? "--eslint"\n                      : ""\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(`./${generalAnswers.projectName}`);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const reactInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          const question = [\n              {\n                  type: "confirm",\n                  name: "swc",\n                  message: "Do you want to use SWC as a compiler?",\n              },\n          ];\n          inquirer.prompt(question).then((answer) => {\n              execSync(\n                  `${manager} create vite@latest ${generalAnswers.projectName} ${\n                      isTs && answer.swc\n                          ? " --template react-swc-ts"\n                          : isTs\n                          ? " --template react-ts"\n                          : answer.swc\n                          ? " --template react-swc"\n                          : " --template react"\n                  } `,\n                  {\n                      stdio: "inherit",\n                  }\n              );\n          });\n      } else {\n          execSync(\n              `${manager} create-react-app ${generalAnswers.projectName} ${\n                  isTs ? "--template typescript" : ""\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const litInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template lit-ts" : "--template lit"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          console.log(\n              `Our system only supports lit with Vite. \\n We\'re installing the framework with vite anyway. Sorry!`\n          );\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template lit-ts" : "--template lit"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const svelteInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template svelte-ts" : " --template svelte"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          console.log(\n              `We\'re sorry that we partially wouldn\'t use parameters you set before and rely on CLI provided by the framework!`\n          );\n          execSync(\n              `${manager} create svelte@latest ${generalAnswers.projectName}`,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const solidInstall = async (manager, isTs) => {\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      execSync(\n          `${manager} create vite@latest ${generalAnswers.projectName} ${\n              isTs ? "-- --template solid-ts" : "-- --template solid"\n          } `,\n          {\n              stdio: "inherit",\n          }\n      );\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const qwikInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? "-- --template qwik-ts" : "-- --template qwik"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          console.log(\n              `We\'re sorry that we partially wouldn\'t use parameters you set before and rely on CLI provided by the framework!`\n          );\n          execSync(\n              `${manager} create qwik@latest ${generalAnswers.projectName}`,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  // css\n  const pandacssInstall = (manager) => {\n      try {\n          execSync(`${manager} install -D @pandacss/dev`, {\n              stdio: "inherit",\n          });\n          execSync(`${manager} panda init --postcss`, {\n              stdio: "inherit",\n          });\n      } catch (error) {\n          console.error("Installation was not successful.");\n          console.log(error);\n      }\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://panda-css.com/docs/installation/cli`\n      );\n  };\n  \n  const tailwindInstall = (manager) => {\n      const configFile = "tailwind.config.js";\n  \n      const filePath = path.join(process.cwd(), configFile);\n  \n      access(filePath, constants.F_OK, (err) => {\n          if (err) {\n              console.log(\n                  `${configFile} does not exist in the specified directory, so we\'re installing tailwind`\n              );\n              try {\n                  execSync(`${manager} install -D tailwindcss`, {\n                      stdio: "inherit",\n                  });\n                  execSync(`npx tailwindcss init`, {\n                      stdio: "inherit",\n                  });\n              } catch (error) {\n                  console.log("Installation was not successful.");\n                  console.log(error);\n              }\n              console.log(\n                  `Installation might not be all set! \\n Refer to the official information for more details: https://tailwindcss.com/docs/installation`\n              );\n          } else {\n              console.log(\n                  `${configFile} already exists in the specified directory.`\n              );\n          }\n      });\n  };\n  \n  const bootstrapInstall = (manager) => {\n      try {\n          execSync(`${manager} i bootstrap`, {\n              stdio: "inherit",\n          });\n      } catch (error) {\n          console.error("Installation was not successful.");\n          console.log(error);\n      }\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://getbootstrap.jp/docs/5.3/getting-started/download/`\n      );\n  };\n  \n  // ui\n  const muiInstall = (manager, fw_name, css_name) => {\n      if (fw_name == ("react" || "next")) {\n          try {\n              if (css_name == "styled-components") {\n                  execSync(\n                      `${manager} @mui/material @mui/styled-engine-sc styled-components`,\n                      {\n                          stdio: "inherit",\n                      }\n                  );\n              } else {\n                  execSync(\n                      `${manager} install @mui/material @emotion/react @emotion/styled`,\n                      {\n                          stdio: "inherit",\n                      }\n                  );\n              }\n          } catch (error) {\n              console.error("Install was not successful.");\n              console.log(error);\n          }\n          console.log(\n              `Installation might not be all set! \\n Refer to the official information for more details: https://mui.com/material-ui/getting-started/installation/`\n          );\n      } else {\n          console.log(\n              "You need to use React or it\'s framework as Mui is peer dependent to react, react-dom."\n          );\n      }\n  };\n  \n  const daisyInstall = async (manager) => {\n      try {\n          const configPath = path.resolve("tailwind.config.js");\n          const pluginName = "daisyui";\n          // 既存のコードを読み取る\n          try {\n              execSync(`${manager} i -D daisyui@latest`, {\n                  stdio: "inherit",\n              });\n          } catch (error) {\n              console.error("Install was not successful.");\n              console.log(error);\n          }\n          try {\n              // ファイル内容を JavaScript オブジェクトとして解析\n              // eslint-disable-next-line no-undef\n              const configObject = await require(configPath);\n              console.log(configObject.default);\n              // 既に追加済みでない場合にプラグインを追加\n              if (!configObject.default.plugins.includes(pluginName)) {\n                  configObject.default.plugins.push(pluginName);\n              }\n  \n              // 変更を加えたオブジェクトを文字列に戻す\n              const updatedConfig = `/** @type {import(\'tailwindcss\').Config} */ \\n export default ${JSON.stringify(\n                  configObject.default,\n                  null,\n                  2\n              )};\\n`;\n  \n              // 変更を保存\n              writeFile(configPath, updatedConfig, "utf-8", (err) => {\n                  if (err) {\n                      console.error("Error writing the file:", err);\n                      return;\n                  }\n                  console.log("Config file updated successfully.");\n              });\n  \n              console.log(\n                  `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n              );\n          } catch (err) {\n              console.error("Something went wrong:", err);\n          }\n      } catch (err) {\n          console.error("Error reading the file:", err);\n          console.log("You need to install tailwind to use daisyUI");\n          return;\n      }\n  };\n  \n  appGenerator({\n      fw_name: "vue",\n      css_name: "tailwind",\n      ui_name: "daisy",\n      eslint: "yes",\n      prettier: "template",\n      isTs: true,\n      manager: "pnpm",\n  });\n  ','\n  #!/bin/jsh\n\n  npm init -y --scope="" \n  npm install inquirer\n  node appGen.mjs\n  ',_context.abrupt("return",{"README.md":{file:{contents:md}},"appGen.mjs":{file:{contents:'/** @format */\n\n  import { execSync } from "child_process";\n  import { access, constants, writeFile, writeFileSync } from "fs";\n  import path from "path";\n  \n  import inquirer from "inquirer";\n  \n  const appGenerator = async ({\n      fw_name,\n      css_name,\n      ui_name,\n      eslint,\n      prettier,\n      isTs,\n      lint_staged_husky,\n      hygen,\n      vscode,\n      volta,\n      manager,\n  }) => {\n      try {\n          // Create a project and switch to the directory.\n          switch (fw_name) {\n              case "vue":\n                  await vueInstall(manager, isTs, eslint, prettier); // eslint option\n                  break;\n              case "react":\n                  await reactInstall(manager, isTs);\n                  break;\n              case "lit":\n                  await litInstall(manager, isTs);\n                  break;\n              case "svelte":\n                  await svelteInstall(manager, isTs);\n                  break;\n              case "solid":\n                  await solidInstall(manager, isTs);\n                  break;\n              case "qwik":\n                  await qwikInstall(manager, isTs);\n                  break;\n              default:\n                  console.log(\n                      `Uh oh. The framework you selected is still not under our support, or incorrect spelling. \\\\ Try again.`\n                  );\n          }\n  \n          if (eslint === "template") {\n              const eslintrcFileGenerate = () =>\n                  `{\n               "extends": ["eslint:recommended", "prettier"],\n               "plugins": ["import", "unused-imports"],\n               "rules": {\n                 "@typescript-eslint/no-unused-vars": "off",\n                 "unused-imports/no-unused-imports": "warn",\n                 "import/order": [\n                   "warn",\n                   {\n                     "groups": [\n                       "builtin",\n                       "external",\n                       "internal",\n                       "parent",\n                       "sibling",\n                       "index",\n                       "object",\n                       "type"\n                     ],\n                     "newlines-between": "always",\n                     "pathGroupsExcludedImportTypes": ["builtin"],\n                     "alphabetize": { "order": "asc", "caseInsensitive": true },\n                     "pathGroups": [\n                     ]\n                   }\n                 ]\n               }\n             }`;\n  \n              const eslintrcFile = ".eslintrc.json";\n              const eslintignoreFile = ".eslintignore";\n  \n              // Scaffold eslint\n              writeFileSync(\n                  path.join(process.cwd(), eslintrcFile),\n                  eslintrcFileGenerate()\n              );\n  \n              const eslintingoreFileGenerate = () => ``;\n  \n              writeFileSync(\n                  path.join(process.cwd(), eslintignoreFile),\n                  eslintingoreFileGenerate()\n              );\n          } else if (eslint === "yes") {\n              execSync(`${manager} install -D eslint`, { stdio: "inherit" });\n              execSync(`${manager} create @eslint/config`, { stdio: "inherit" });\n              execSync(`${manager} install -D vite-plugin-checker`, {\n                  stdio: "inherit",\n              });\n          } else {\n              console.log("eslint installation was skipped");\n          }\n  \n          if (prettier === "template") {\n              execSync(`${manager} install -D prettier`, { stdio: "inherit" });\n              execSync(`${manager} install -D eslint-config-prettier`, {\n                  stdio: "inherit",\n              });\n              const prettierrcFile = ".prettierrc.json";\n              const prettierignoreFile = ".prettierignore";\n  \n              const prettierrcFileGenerate = () => `\n            {\n              "plugins": [""],\n              "semi": false,\n              "singleQuote": true,\n              "printWidth": 90,\n              "tabWidth": 2,\n              "trailingComma": "all",\n              "jsxSingleQuote": true\n            }\n            `;\n              // Scafford prettier\n              writeFileSync(\n                  path.join(process.cwd(), prettierrcFile),\n                  prettierrcFileGenerate()\n              );\n  \n              const prettieringoreFileGenerate = () => ``;\n  \n              writeFileSync(\n                  path.join(process.cwd(), prettierignoreFile),\n                  prettieringoreFileGenerate()\n              );\n          } else if (prettier === "yes") {\n              execSync(`${manager} install -D prettier eslint-config-prettier`, {\n                  stdio: "inherit",\n              });\n          } else {\n              console.log("prettier installation was skipped");\n          }\n  \n          // css library installation\n          if (css_name) {\n              switch (css_name) {\n                  case "bootstrap":\n                      bootstrapInstall(manager);\n                      break;\n                  case "tailwind":\n                      tailwindInstall(manager);\n                      break;\n                  case "panda":\n                      pandacssInstall(manager);\n                      break;\n                  default:\n                      console.log(\n                          `Uh oh. The framework you selected is still not under our support.`\n                      );\n              }\n          } else {\n              console.log("css library installation was skipped");\n          }\n  \n          // ui library installation\n          if (ui_name) {\n              switch (ui_name) {\n                  case "mui":\n                      muiInstall(manager, fw_name, css_name);\n                      break;\n                  case "daisy":\n                      daisyInstall(manager);\n                      break;\n                  default:\n                      console.log(\n                          `Uh oh. The framework you selected is still not under our support.`\n                      );\n              }\n          } else {\n              console.log("UI library installation was skipped");\n          }\n  \n          // Install dependency if needed\n          execSync(`${manager} install`, { stdio: "inherit" });\n  \n          // Run and serve\n          execSync(`${manager} run dev`, { stdio: "inherit" });\n      } catch (error) {\n          console.error("An error occurred:", error.message);\n      }\n  };\n  \n  const generalQuestion = [\n      {\n          type: "input",\n          name: "projectName",\n          message: "What do you want to name your app?",\n      },\n  ];\n  // framework\n  const vueInstall = async (manager, isTs, eslint, prettier) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n  \n      const generalAnswers = await inquirer.prompt(generalQuestion);\n  \n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template vue-ts" : " --template vue"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          execSync(\n              `${manager} create vue@latest ${generalAnswers.projectName} ${\n                  isTs ? "--typescript" : ""\n              } ${\n                  eslint && prettier\n                      ? "--eslint-with-prettier"\n                      : eslint\n                      ? "--eslint"\n                      : ""\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(`./${generalAnswers.projectName}`);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const reactInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          const question = [\n              {\n                  type: "confirm",\n                  name: "swc",\n                  message: "Do you want to use SWC as a compiler?",\n              },\n          ];\n          inquirer.prompt(question).then((answer) => {\n              execSync(\n                  `${manager} create vite@latest ${generalAnswers.projectName} ${\n                      isTs && answer.swc\n                          ? " --template react-swc-ts"\n                          : isTs\n                          ? " --template react-ts"\n                          : answer.swc\n                          ? " --template react-swc"\n                          : " --template react"\n                  } `,\n                  {\n                      stdio: "inherit",\n                  }\n              );\n          });\n      } else {\n          execSync(\n              `${manager} create-react-app ${generalAnswers.projectName} ${\n                  isTs ? "--template typescript" : ""\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const litInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template lit-ts" : "--template lit"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          console.log(\n              `Our system only supports lit with Vite. \\n We\'re installing the framework with vite anyway. Sorry!`\n          );\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template lit-ts" : "--template lit"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const svelteInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? " --template svelte-ts" : " --template svelte"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          console.log(\n              `We\'re sorry that we partially wouldn\'t use parameters you set before and rely on CLI provided by the framework!`\n          );\n          execSync(\n              `${manager} create svelte@latest ${generalAnswers.projectName}`,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const solidInstall = async (manager, isTs) => {\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      execSync(\n          `${manager} create vite@latest ${generalAnswers.projectName} ${\n              isTs ? "-- --template solid-ts" : "-- --template solid"\n          } `,\n          {\n              stdio: "inherit",\n          }\n      );\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  const qwikInstall = async (manager, isTs) => {\n      generalQuestion.push({\n          type: "confirm",\n          name: "vite",\n          message: "Do you want to use Vite as a builder?",\n      });\n      const generalAnswers = await inquirer.prompt(generalQuestion);\n      if (generalAnswers.vite) {\n          execSync(\n              `${manager} create vite@latest ${generalAnswers.projectName} ${\n                  isTs ? "-- --template qwik-ts" : "-- --template qwik"\n              } `,\n              {\n                  stdio: "inherit",\n              }\n          );\n      } else {\n          console.log(\n              `We\'re sorry that we partially wouldn\'t use parameters you set before and rely on CLI provided by the framework!`\n          );\n          execSync(\n              `${manager} create qwik@latest ${generalAnswers.projectName}`,\n              {\n                  stdio: "inherit",\n              }\n          );\n      }\n      // Change to the project directory\n      process.chdir(generalAnswers.projectName);\n      console.log(path.join(process.cwd(), `${generalAnswers.projectName}/`));\n      generalQuestion.pop();\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n      );\n  };\n  \n  // css\n  const pandacssInstall = (manager) => {\n      try {\n          execSync(`${manager} install -D @pandacss/dev`, {\n              stdio: "inherit",\n          });\n          execSync(`${manager} panda init --postcss`, {\n              stdio: "inherit",\n          });\n      } catch (error) {\n          console.error("Installation was not successful.");\n          console.log(error);\n      }\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://panda-css.com/docs/installation/cli`\n      );\n  };\n  \n  const tailwindInstall = (manager) => {\n      const configFile = "tailwind.config.js";\n  \n      const filePath = path.join(process.cwd(), configFile);\n  \n      access(filePath, constants.F_OK, (err) => {\n          if (err) {\n              console.log(\n                  `${configFile} does not exist in the specified directory, so we\'re installing tailwind`\n              );\n              try {\n                  execSync(`${manager} install -D tailwindcss`, {\n                      stdio: "inherit",\n                  });\n                  execSync(`npx tailwindcss init`, {\n                      stdio: "inherit",\n                  });\n              } catch (error) {\n                  console.log("Installation was not successful.");\n                  console.log(error);\n              }\n              console.log(\n                  `Installation might not be all set! \\n Refer to the official information for more details: https://tailwindcss.com/docs/installation`\n              );\n          } else {\n              console.log(\n                  `${configFile} already exists in the specified directory.`\n              );\n          }\n      });\n  };\n  \n  const bootstrapInstall = (manager) => {\n      try {\n          execSync(`${manager} i bootstrap`, {\n              stdio: "inherit",\n          });\n      } catch (error) {\n          console.error("Installation was not successful.");\n          console.log(error);\n      }\n      console.log(\n          `Installation might not be all set! \\n Refer to the official information for more details: https://getbootstrap.jp/docs/5.3/getting-started/download/`\n      );\n  };\n  \n  // ui\n  const muiInstall = (manager, fw_name, css_name) => {\n      if (fw_name == ("react" || "next")) {\n          try {\n              if (css_name == "styled-components") {\n                  execSync(\n                      `${manager} @mui/material @mui/styled-engine-sc styled-components`,\n                      {\n                          stdio: "inherit",\n                      }\n                  );\n              } else {\n                  execSync(\n                      `${manager} install @mui/material @emotion/react @emotion/styled`,\n                      {\n                          stdio: "inherit",\n                      }\n                  );\n              }\n          } catch (error) {\n              console.error("Install was not successful.");\n              console.log(error);\n          }\n          console.log(\n              `Installation might not be all set! \\n Refer to the official information for more details: https://mui.com/material-ui/getting-started/installation/`\n          );\n      } else {\n          console.log(\n              "You need to use React or it\'s framework as Mui is peer dependent to react, react-dom."\n          );\n      }\n  };\n  \n  const daisyInstall = async (manager) => {\n      try {\n          const configPath = path.resolve("tailwind.config.js");\n          const pluginName = "daisyui";\n          // 既存のコードを読み取る\n          try {\n              execSync(`${manager} i -D daisyui@latest`, {\n                  stdio: "inherit",\n              });\n          } catch (error) {\n              console.error("Install was not successful.");\n              console.log(error);\n          }\n          try {\n              // ファイル内容を JavaScript オブジェクトとして解析\n              // eslint-disable-next-line no-undef\n              const configObject = await require(configPath);\n              console.log(configObject.default);\n              // 既に追加済みでない場合にプラグインを追加\n              if (!configObject.default.plugins.includes(pluginName)) {\n                  configObject.default.plugins.push(pluginName);\n              }\n  \n              // 変更を加えたオブジェクトを文字列に戻す\n              const updatedConfig = `/** @type {import(\'tailwindcss\').Config} */ \\n export default ${JSON.stringify(\n                  configObject.default,\n                  null,\n                  2\n              )};\\n`;\n  \n              // 変更を保存\n              writeFile(configPath, updatedConfig, "utf-8", (err) => {\n                  if (err) {\n                      console.error("Error writing the file:", err);\n                      return;\n                  }\n                  console.log("Config file updated successfully.");\n              });\n  \n              console.log(\n                  `Installation might not be all set! \\n Refer to the official information for more details: https://daisyui.com/docs/install/`\n              );\n          } catch (err) {\n              console.error("Something went wrong:", err);\n          }\n      } catch (err) {\n          console.error("Error reading the file:", err);\n          console.log("You need to install tailwind to use daisyUI");\n          return;\n      }\n  };\n  \n  appGenerator({\n      fw_name: "vue",\n      css_name: "tailwind",\n      ui_name: "daisy",\n      eslint: "yes",\n      prettier: "template",\n      isTs: true,\n      manager: "pnpm",\n  });\n  '}},"create.sh":{file:{contents:'\n  #!/bin/jsh\n\n  npm init -y --scope="" \n  npm install inquirer\n  node appGen.mjs\n  '}}});case 5:case"end":return _context.stop()}}),_callee)})));return function fileGenerator(_x){return _ref2.apply(this,arguments)}}(),getFiles=function(){var _ref3=(0,asyncToGenerator.Z)(regenerator_default().mark((function _callee2(){var files;return regenerator_default().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return _context2.next=2,fileGenerator({fw_name:"vue",ui_name:null,css_name:null,eslint:"yes",prettier:"template",isTs:!0,manager:"pnpm",isGit:!1});case 2:return files=_context2.sent,console.log("**********"),console.log(files),console.log("**********"),_context2.abrupt("return",files);case 7:case"end":return _context2.stop()}}),_callee2)})));return function getFiles(){return _ref3.apply(this,arguments)}}(),css=__webpack_require__("./styled-system/css/index.mjs"),NodeContainer_css_textarea=(0,css.jS)({base:{width:"100%",height:"100%",resize:"none",borderRadius:"0.5rem",background:"black",color:"white",padding:"0.5rem 1rem"}}),NodeContainer_console=(__webpack_require__("./node_modules/.pnpm/xterm@5.2.1/node_modules/xterm/css/xterm.css"),__webpack_require__("./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js")),__jsx=react.createElement,NodeContainer=function NodeContainer(){var _useState=(0,react.useState)(null),webcontainer=_useState[0],setWebcontainer=_useState[1];return(0,react.useEffect)((function(){var ignore=!1,initWebContainer=function(){var _ref=(0,asyncToGenerator.Z)(regenerator_default().mark((function _callee(){var wc;return regenerator_default().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.next=2,dist.t.boot();case 2:wc=_context.sent,setWebcontainer(wc);case 4:case"end":return _context.stop()}}),_callee)})));return function initWebContainer(){return _ref.apply(this,arguments)}}();return ignore||initWebContainer(),function(){ignore=!0}}),[]),(0,react.useMemo)((function(){if(webcontainer){var textarea=document.querySelector("textarea"),iframe=document.querySelector("iframe"),terminalEl=document.querySelector(".terminal");textarea&&((0,asyncToGenerator.Z)(regenerator_default().mark((function _callee2(){var files;return regenerator_default().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return _context2.next=2,getFiles();case 2:files=_context2.sent,NodeContainer_console.log("**********"),NodeContainer_console.log(files),NodeContainer_console.log("**********"),textarea.value=files["README.md"].file.contents;case 7:case"end":return _context2.stop()}}),_callee2)})))(),textarea.addEventListener("input",(function(event){if(event.currentTarget){var content=event.currentTarget.value;webcontainer.fs.writeFile("/README.md",content)}})));var bootWebContainer=function(){var _ref3=(0,asyncToGenerator.Z)(regenerator_default().mark((function _callee4(){var fitAddon,initTerminal,terminal,shellProcess;return regenerator_default().wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:return fitAddon=new xterm_addon_fit.FitAddon,initTerminal=function initTerminal(terminalEl){var terminal=new xterm.Terminal({convertEol:!0});return terminal.loadAddon(fitAddon),terminal.open(terminalEl),fitAddon.fit(),terminal},terminal=initTerminal(terminalEl),(0,asyncToGenerator.Z)(regenerator_default().mark((function _callee3(){return regenerator_default().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:return _context3.t0=webcontainer,_context3.next=3,getFiles();case 3:return _context3.t1=_context3.sent,_context3.next=6,_context3.t0.mount.call(_context3.t0,_context3.t1);case 6:case"end":return _context3.stop()}}),_callee3)})))(),webcontainer.on("server-ready",(function(port,url){iframe&&(iframe.src=url)})),_context4.next=7,startShell(terminal);case 7:shellProcess=_context4.sent,window.addEventListener("resize",(function(){fitAddon.fit(),shellProcess.resize({cols:terminal.cols,rows:terminal.rows})}));case 9:case"end":return _context4.stop()}}),_callee4)})));return function bootWebContainer(){return _ref3.apply(this,arguments)}}();bootWebContainer()}function startShell(_x){return _startShell.apply(this,arguments)}function _startShell(){return(_startShell=(0,asyncToGenerator.Z)(regenerator_default().mark((function _callee5(terminal){var shellProcess,input;return regenerator_default().wrap((function _callee5$(_context5){for(;;)switch(_context5.prev=_context5.next){case 0:return _context5.next=2,webcontainer.spawn("jsh",{terminal:{cols:terminal.cols,rows:terminal.rows}});case 2:return(shellProcess=_context5.sent).output.pipeTo(new WritableStream({write:function write(data){terminal.write(data)}})),input=shellProcess.input.getWriter(),terminal.onData((function(data){input.write(data)})),_context5.abrupt("return",shellProcess);case 7:case"end":return _context5.stop()}}),_callee5)})))).apply(this,arguments)}}),[webcontainer]),__jsx("div",{className:(0,css.iv)({display:"grid",gridTemplateRows:"1fr 1fr",gap:"1rem",height:"100%",width:"100%"})},__jsx("div",{className:(0,css.iv)({display:"grid",gridTemplateColumns:"1fr 1fr",gap:"1rem",marginBottom:"20px"})},__jsx("div",null,__jsx("p",null,"📝 Information"),__jsx("textarea",{readOnly:!0,className:NodeContainer_css_textarea(),defaultValue:"⛅️ Reading the instructions..."})),__jsx("div",{className:(0,css.iv)({width:"100%",height:"100%"})},__jsx("p",null,"✨ Output"),__jsx("iframe",{src:"/loading",className:(0,css.iv)({height:"100%",width:"100%",borderRadius:"0.5rem"})}))),__jsx("div",{className:(0,css.iv)({width:"100%",height:"100%"})},__jsx("p",{className:(0,css.iv)({marginTop:"20px"})},"🤖 Terminal"),__jsx("div",{className:"terminal"})))};function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){(0,defineProperty.Z)(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}NodeContainer.displayName="NodeContainer",NodeContainer.__docgenInfo={description:"",methods:[],displayName:"NodeContainer"};const NodeContainer_stories={title:"NodeContainer",component:NodeContainer,tags:["autodocs"],parameters:{layout:"fullscreen"},argTypes:{}};var Default={};Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs),{},{source:_objectSpread({originalSource:"{}"},null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2=_Default$parameters2.docs)||void 0===_Default$parameters2?void 0:_Default$parameters2.source)})})}}]);
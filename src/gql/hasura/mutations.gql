mutation CreateTeam($name: String!) {
  insert_teams(objects: { name: $name }) {
    returning {
      admin_id
      name
      id
    }
  }
}

# if the user wanna join, only the team leader can add a user

mutation CreateBoard($is_public: Boolean!, $team_id: uuid!) {
  insert_boards(objects: { is_public: $is_public, team_id: $team_id }) {
    returning {
      id
      created_at
      is_public
      user_id
      team_id
    }
  }
}

mutation CreateDetails($board_id: uuid!) {
  insert_board_details(objects: { board_id: $board_id }) {
    returning {
      id
      board_id
    }
  }
}

mutation UpdateDetails($id: uuid!, $changes: board_details_set_input) {
  update_board_details(where: { id: { _eq: $id } }, _set: $changes) {
    affected_rows
  }
}
mutation UpdateTeamBoardDetails($id: uuid!, $changes: team_board_details_set_input) {
  update_team_board_details(where: { id: { _eq: $id } }, _set: $changes) {
    affected_rows
  }
}

mutation InsertMessage($board_id: uuid!, $content: String!) {
  insert_comments_one(object: { board_id: $board_id, content: $content }) {
    id
    content
    updated_at
    user {
      id
      name
    }
  }
}

mutation SetLastSeenTimestamp($userId: String!) {
  update_users_by_pk(pk_columns: { id: $userId }, _set: { last_seen: "now()" }) {
    id
    updated_at
    last_seen
  }
}

mutation InsertTeamMember($team_id: uuid!, $user_id: String!) {
  insert_team_member_one(object: { team_id: $team_id, user_id: $user_id }) {
    team_id
    user_id
    teams {
      team_boards {
        id
        team_board_detail {
          id
        }
      }
    }
  }
}

mutation CreateTeamBoard($team_id: uuid!) {
  insert_team_boards_one(object: { team_id: $team_id }) {
    id
  }
}

mutation CreateTeamBoardDetails($team_board_id: uuid!) {
  insert_team_board_details_one(object: { team_board_id: $team_board_id }) {
    id
  }
}

mutation InsertLike($comment_id: uuid!, $user_id: String!) {
  insert_likes_one(object: { comment_id: $comment_id, user_id: $user_id }) {
    created_at
  }
}

mutation DeleteLike($comment_id: uuid!, $user_id: String!) {
  delete_likes(where: { user_id: { _eq: $user_id }, comment_id: { _eq: $comment_id } }) {
    affected_rows
  }
}

mutation UpdateBoardVisibility($board_id: uuid!, $is_public: Boolean!) {
  update_boards_by_pk(pk_columns: { id: $board_id }, _set: { is_public: $is_public }) {
    updated_at
  }
}

mutation InsertAgreement($team_board_id: uuid!) {
  insert_agreements_one(object: { team_board_id: $team_board_id }) {
    id
    is_agreed
  }
}

mutation UpdateAgreement($team_board_id: uuid!, $is_agreed: Boolean!) {
  update_agreements(
    where: { team_board_id: { _eq: $team_board_id } }
    _set: { is_agreed: $is_agreed }
  ) {
    affected_rows
  }
}

mutation InsertProjectOverview($team_id: uuid!) {
  insert_project_details_one(object: { team_id: $team_id }) {
    id
  }
}

mutation UpdateProjectOverview($team_id: uuid!, $content: String!) {
  update_project_details(
    where: { team_id: { _eq: $team_id } }
    _set: { project_abstract: $content }
  ) {
    affected_rows
  }
}
